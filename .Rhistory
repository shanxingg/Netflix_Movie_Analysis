########################
# Sampling Distribution and The Central Limit Theorem
########################
#########################################################
####### ROLL OF A DIE SIMULATION ########################
####### SAMPLING DISTRIBUTION OF SAMPLE MEANS ###########
#########################################################
###### PART 1 - Show the Probability Distribution and Summary Measures
die <- c(1, 2, 3, 4, 5, 6)
p_unrounded <- c(1, 1, 1, 1, 1, 1)/6
p <- round(p_unrounded, digits = 3)
### Create a Probability Distribution
data.frame(die, p)
### Plot the Probability Distribution
### The result is uniform
barplot(p, main = "Probability Distribution of Die Roll",
ylim = c(0, 0.2), names.arg = c("1", "2", "3", "4", "5", "6"),
ylab = "Probability")
### Find the theoretical mean and std. dev.
theor_mean <- mean(die)
theor_var <- sum((die - theor_mean)^2)/6
theor_sd <- sqrt(theor_var)
theor_mean
theor_var
theor_sd
###### PART 2 - Building the Sampling Distribution
###### For intuition, this includes a sample size of 5 and
###### 10 samples so that students can visualize.
###### Results are stored in matrix_Roll_Die
set.seed(50)
die <- c(1, 2, 3, 4, 5, 6)
theor_mean <- mean(die)
theor_var <- sum((die - theor_mean)^2)/6
theor_sd <- sqrt(theor_var)
### Now sample
rep_Roll_Die <- replicate(10, {
samp <- sample(die, 5, replace = TRUE)
})
### Store the results in a matrix
matrix_Roll_Die <- matrix(rep_Roll_Die, 10)
colnames(matrix_Roll_Die) <- c("1st", "2nd", "3rd", "4th", "5th")
### Find the mean for each sample
samp_means <- rowMeans(matrix_Roll_Die)
### Add the Sample Means column to the matrix_Roll_Die to visualzie results
matrix_Roll_Die <- cbind(matrix_Roll_Die, samp_means)
### View the Final Matrix...
matrix_Roll_Die
###### PART 3 - Show the Sampling Distribution and Summary Measures
###### Now this includes a sample size of 20 and
###### 10,000 samples.
###### Results are stored in matrix_Roll_Die.
###### Histogram shows the shape of the sampling distribution.
set.seed(50)
die <- c(1, 2, 3, 4, 5, 6)
### Theoretical Means and SD
theor_mean <- mean(die)
theor_var <- sum((die - theor_mean)^2)/6
theor_sd <- sqrt(theor_var)
## Now sample
rep_Roll_Die <- replicate(10000, {
samp <- sample(die, 20, replace = TRUE)
})
## Store the results in a matrix
matrix_Roll_Die <- matrix(rep_Roll_Die, 10000)
### Find the mean for each sample.
### Since there are 10,000 samples, there will be 10,000 means
samp_means <- rowMeans(matrix_Roll_Die)
### Find the mean of all 10,000 Sample Means
sm_average <- mean(samp_means)
### Std Dev of of all 10,000 Sample Means = Standard Error
sm_sd <- sd(samp_means)
### Mean of sample means approaches the theoretical mean
### If the theoretical mean is unknown, then draw samples,
### and find the mean of sample means.
### Mean of sample means approximately equal to the theoretical mean.
### Sample mean is an unbiased estimator of the population mean.
theor_mean
sm_average
### Plot the histogram of sample means
### And compare with the original probability distribution.
### The original probability distribution = Uniform
### The sampling distribution of sample means = Normal or Approx. Normal
### Repeated sampling converts a uniform distribution to a Normal or Approx. Normal Distribution.
hist(samp_means, probability = FALSE)
### Theoretical Std. Error
theor_se <- theor_sd/sqrt(20)
### Std Error from Simulation
sm_sd
### Compare the theoretical standard error with the std. Error from Simulation.
theor_se
sm_sd
###############################################################
####### ROLL OF A DIE SIMULATION ##############################
####### SAMPLING DISTRIBUTION OF SAMPLE PROPORTIONS ###########
###############################################################
###### PART 1 - Find the Theoretical Proportion of Odd numbers in a Die Roll
die <- c(1, 2, 3, 4, 5, 6)
### Find the theoretical proportion of odd numbers
theor_proportion <- 3/6
theor_proportion
###### PART 2 - Building the Sampling Distribution
###### For intuition, this includes a sample size of 5 and
###### 10 samples so that students can visualize.
###### Results are stored in matrix_Roll_Die
die <- c(1, 2, 3, 4, 5, 6)
theor_proportion <- 3/6
theor_proportion
### Now sample
set.seed(50)
rep_Roll_Die <- replicate(10, {
samp <- sample(die, 5, replace = TRUE)
})
### Store the results in a matrix
matrix_Roll_Die <- matrix(rep_Roll_Die, 10)
colnames(matrix_Roll_Die) <- c("1st", "2nd", "3rd", "4th", "5th")
### Find the proportion of odd numbers for each sample
samp_props <- rowSums(matrix_Roll_Die %% 2 != 0)/ncol(matrix_Roll_Die)
### Append the Sample Proportions column to the matrix_Roll_Die to visualize results
matrix_Roll_Die <- cbind(matrix_Roll_Die, samp_props)
### View the Final Matrix containing sample proportions off odd numbers...
matrix_Roll_Die
###### PART 3 - Show the Sampling Distribution and Summary Measures
###### Now this includes a sample size of 20 and
###### 10,000 samples.
###### Results are stored in matrix_Roll_Die.
###### Histogram shows the shape of the sampling distribution.
die <- c(1, 2, 3, 4, 5, 6)
theor_proportion <- 3/6
theor_proportion
### Now sample
set.seed(50)
rep_Roll_Die <- replicate(10000, {
samp <- sample(die, 20, replace = TRUE)
})
### Store the results in a matrix
matrix_Roll_Die <- matrix(rep_Roll_Die, 10000)
### Find the proportion of odd numbers for each sample
samp_props <- rowSums(matrix_Roll_Die %% 2 != 0)/ncol(matrix_Roll_Die)
### Find the mean of proportion for all 10,000 samples
means_of_samp_props <- mean(samp_props)
### Mean of sample proportions approaches the theoretical proportion
### If the theoretical proportion is unknown, then draw samples,
### and find the mean of sample proportions.
### Mean of sample proportions approximately equal to the theoretical proportion.
### Sample proportaion is an unbiased estimator of the population proportion.
theor_proportion
means_of_samp_props
### Plot the histogram of sample proportions
### The sampling distribution of sample proportions = Normal or Approx. Normal
### Repeated sampling converts any distribution to a Normal or Approx. Normal Distribution.
hist(samp_props, probability = FALSE)
############################################################
####### ROLL OF A DIE SIMULATION ###########################
####### SAMPLING DISTRIBUTION OF SAMPLE VARIANCE ###########
############################################################
###### PART 1 - Show the Probability Distribution and Summary Measures
die <- c(1, 2, 3, 4, 5, 6)
p_unrounded <- c(1, 1, 1, 1, 1, 1)/6
p <- round(p_unrounded, digits = 3)
### Create a Probability Distribution
data.frame(die, p)
### Plot the Probability Distribution
### The result is uniform
barplot(p, main = "Probability Distribution of Die Roll",
ylim = c(0, 0.2), names.arg = c("1", "2", "3", "4", "5", "6"),
ylab = "Probability")
### Find the theoretical mean and std. dev.
theor_mean <- mean(die)
theor_var <- sum((die - theor_mean)^2)/6
theor_var
###### PART 2 - Building the Sampling Distribution of Sample Variance
###### For intuition, this includes a sample size of 5 and
###### 10 samples so that students can visualize.
###### Results are stored in matrix_Roll_Die
set.seed(50)
die <- c(1, 2, 3, 4, 5, 6)
theor_mean <- mean(die)
theor_var <- sum((die - theor_mean)^2)/6
### Now sample
rep_Roll_Die <- replicate(10, {
samp <- sample(die, 5, replace = TRUE)
})
### Store the results in a matrix
matrix_Roll_Die <- matrix(rep_Roll_Die, 10)
colnames(matrix_Roll_Die) <- c("1st", "2nd", "3rd", "4th", "5th")
### Find the variance for each sample
samp_vars <- apply(matrix_Roll_Die, 1, var)
### Add the Sample Means column to the matrix_Roll_Die to visualzie results
matrix_Roll_Die <- cbind(matrix_Roll_Die, samp_vars)
### View the Final Matrix...
matrix_Roll_Die
###### PART 3 - Show the Sampling Distribution and Summary Measures
###### Now this includes a sample size of 5 and
###### 10,000 samples.
###### Results are stored in matrix_Roll_Die.
###### Histogram shows the shape of the sampling distribution.
set.seed(50)
die <- c(1, 2, 3, 4, 5, 6)
### Theoretical Means and Variance
theor_mean <- mean(die)
theor_var <- sum((die - theor_mean)^2)/6
## Now sample
rep_Roll_Die <- replicate(10000, {
samp <- sample(die, 5, replace = TRUE)
})
## Store the results in a matrix
matrix_Roll_Die <- matrix(rep_Roll_Die, 10000)
### Find the variance for each sample.
### Since there are 10,000 samples, there will be 10,000 sample variances
samp_vars <- apply(matrix_Roll_Die, 1, var)
### Find the mean of all 10,000 Sample Variances
mean_of_sample_vars <- mean(samp_vars)
### Mean of sample variances approaches the theoretical mean
### If the theoretical mean is unknown, then draw samples,
### and find the mean of sample variances.
### Mean of sample variances approximately equal to the theoretical mean.
### Sample variance is an unbiased estimator of the population variance.
theor_var
mean_of_sample_vars
### Plot the histogram of sample means
### And compare with the original probability distribution.
### The original probability distribution = Uniform
### The sampling distribution of sample variances = Right-Skewed
### Repeated sampling converts a uniform distribution to a Right-Skewed.
hist(samp_vars, probability = FALSE)
########################################################
########################################################
##### Demonstration of The Central Limit Theorem #######
########################################################
########################################################
##########################################################################
### Effect of Sample Size Increase on Normal Distribution ################
### Normal Distribution stays as a Normal Distribution ###################
##########################################################################
#### Create a Norm Distribution ...
set.seed(50)
n <- 5 # Sample Size = Five
rows <- 10000 # 10,000 trials
Norm_Mean <- 12 ## Mean for the Normal Distribution
Norm_Std_Dev <- 0.11 ## Std Dev.
### Simulate random sampling in Normal Distribution
simulate_norm <- rnorm(n*rows, Norm_Mean, Norm_Std_Dev)
### Plot a histogram of Normal distribution
hist(simulate_norm, xlim = c(11.4, 12.4))
m <- matrix(simulate_norm, rows)
### Finding the means for each of the 10,000 samples
sample_means <- rowMeans(m)
### Histogram of Sample Means = Normal.
hist(sample_means, xlim = c(11.4, 12.4))
### Find the mean of sample means
mean_of_sample_means <- mean(sample_means)
std_error_of_sample_means <- sd(sample_means)
### Theoretical Std Error. Mean = Std Error for the Normal Distribution
theor_se <- Norm_Std_Dev/sqrt(n)
### Summarize values....
### See how the mean of sample means is so close to the mu (the population mean)
Norm_Mean
mean_of_sample_means
### See how close the theoretical std error is to the std error of sample
### mans through simulation
std_error_of_sample_means
theor_se
###################################################################
### Effect of Sample Size Increase on Poisson Distribution ########
### Poisson Distribution to Normal Distribution ###################
###################################################################
#### Create a Poisson Distribution specifying lamdba as the mean...
set.seed(50)
n <- 5 # Sample Size = Five
rows <- 10000 # 10,000 trials
lambda <- 3 # Mean for Poisson Distribution
### Simulate random sampling in Possion Distribution
simulate_pois <- rpois(n*rows, lambda)
### Plot a histogram of Poisson distribution
hist(simulate_pois)
m <- matrix(simulate_pois, rows)
### Finding the means for each of the 10,000 samples
sample_means <- rowMeans(m)
### Histogram of Sample Means = Approx. Normal.
hist(sample_means)
### Find the mean of sample means
mean_of_sample_means <- mean(sample_means)
std_error_of_sample_means <- sd(sample_means)
### Theoretical Std Error
theor_se <- sqrt(lambda/n)
### Summarize values....
### See how the mean of sample means is so close to the lambda (the population mean)
lambda
mean_of_sample_means
### See how close the theoretical std error is to the std error of sample
### mans through simulation
std_error_of_sample_means
theor_se
#######################################################################
### Effect of Sample Size Increase on Exponential Distribution ########
### Exponential Distribution to Normal Distribution ###################
#######################################################################
#### Create an Exponential Distribution ...
#### Chosen the mean as 1, Arbitrary
set.seed(50)
n <- 5 # Sample Size = Five
rows <- 10000 # 10,000 trials
Exp_Mean <- 1 # Mean for Exponential Distribution
### Simulate random sampling in Possion Distribution
simulate_exp <- rexp(n*rows, Exp_Mean)
### Plot a histogram of Poisson distribution
hist(simulate_exp)
m <- matrix(simulate_exp, rows)
### Finding the means for each of the 10,000 samples
sample_means <- rowMeans(m)
### Histogram of Sample Means = Approx. Normal.
hist(sample_means)
### Find the mean of sample means
mean_of_sample_means <- mean(sample_means)
std_error_of_sample_means <- sd(sample_means)
### Theoretical Std Error. Mean = Std Dev for Exponential Distribution
theor_se <- sqrt(Exp_Mean/n)
### Summarize values....
### See how the mean of sample means is so close to the 1/lambda (the population mean)
Exp_Mean
mean_of_sample_means
### See how close the theoretical std error is to the std error of sample
### mans through simulation
std_error_of_sample_means
theor_se
theor_mean <- mean(die)
theor_var <- sum((die - theor_mean)^2)/6
theor_sd <- sqrt(theor_var)
theor_mean
theor_var
theor_sd
library(ggplot2)
library(grid)
library(dplyr)
movie <- read.csv("movie.csv")
setwd("~/Documents/GitHub/dataviz_project")
library(ggplot2)
library(grid)
library(dplyr)
movie <- read.csv("movie.csv")
View(movie)
# boxplot2
# Profit Percentage VS. Runtime_min
# data cleaning
# select genre with number of datapoint >= 15
Freq_genre <- as.data.frame(sort(table(movie$Genre),decreasing=TRUE))
selected_genre <- as.character(Freq_genre[Freq_genre$Freq>=15,1])
movieG <- movie[movie$Genre %in% selected_genre,]
movie_2 <- movieG
movie_2$Profit_perc2 <- log10(as.numeric(gsub(",","",movie_2$Profit_perc)))
movie_2$Quantile <- "none"
quan_25 <- round(quantile(movie_2$Runtime_min, 0.25))
quan_50 <- round(quantile(movie_2$Runtime_min, 0.50))
quan_75 <- round(quantile(movie_2$Runtime_min, 0.75))
quan_100 <- quantile(movie_2$Runtime_min, 1)
movie_2$Quantile[movie_2$Runtime_min<=quan_25] <- paste0("0-",quan_25)
movie_2$Quantile[movie_2$Runtime_min<=quan_50 & movie_2$Runtime_min>quan_25] <- paste0(quan_25,"-",quan_50)
movie_2$Quantile[movie_2$Runtime_min<=quan_75 & movie_2$Runtime_min>quan_50] <- paste0(quan_50,"-",quan_75)
movie_2$Quantile[movie_2$Runtime_min>quan_75] <- paste0(quan_75,"-",quan_100)
ggplot(movie_2, aes(x=Quantile, y=Profit_perc2))+
geom_boxplot()+
facet_wrap( ~ Genre)+
labs(x="Movie Run Time(min)", y="Profit Percentage (log transformed)")+
ggtitle("Profit Percentage VS. Movie Run Time")+
theme(plot.title = element_text(hjust=0.5, face="bold"))
